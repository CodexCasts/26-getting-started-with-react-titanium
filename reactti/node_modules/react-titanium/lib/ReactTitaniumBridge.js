'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.get = get;
exports.getApiName = getApiName;
exports.register = register;
exports.create = create;
exports.update = update;
exports.attachListeners = attachListeners;
exports.updateChildren = updateChildren;

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _titaniumPlatformsOsIos = require('titanium-platforms/os/ios');

var _titaniumPlatformsOsIos2 = _interopRequireDefault(_titaniumPlatformsOsIos);

var assign = _Object$assign;

// Utilities

var _utilsDiscernTextChildren = require('./utils/discernTextChildren');

var _utilsDiscernTextChildren2 = _interopRequireDefault(_utilsDiscernTextChildren);

exports.discernTextChildren = _utilsDiscernTextChildren2['default'];

var _utilsExtractHandlers = require('./utils/extractHandlers');

var _utilsExtractHandlers2 = _interopRequireDefault(_utilsExtractHandlers);

exports.extractHandlers = _utilsExtractHandlers2['default'];

var _utilsMutatePropsForTextChildren = require('./utils/mutatePropsForTextChildren');

var _utilsMutatePropsForTextChildren2 = _interopRequireDefault(_utilsMutatePropsForTextChildren);

exports.mutatePropsForTextChildren = _utilsMutatePropsForTextChildren2['default'];

var _utilsSeparateChildren = require('./utils/separateChildren');

// Definitions

var _utilsSeparateChildren2 = _interopRequireDefault(_utilsSeparateChildren);

exports.separateChildren = _utilsSeparateChildren2['default'];
var registry = {};

function get(type) {
  (0, _invariant2['default'])(type in registry, 'No definition found for "' + type + '"');

  return registry[type];
}

function getApiName(type) {
  if (type in registry) return registry[type].apiName;else return type;
}

var defaults = {
  factory: function factory(props) {
    return Ti.UI.createView(props);
  },

  create: function create(props, handlers, getChildren) {
    var view = this.factory(props);

    attachListeners(view, handlers);

    updateChildren(view, getChildren());

    return view;
  },

  update: function update(view, props, handlers) {
    // TODO: manage handlers

    for (var key in props) {
      var nextValue = props[key];

      if (key === 'value') {
        var oldValue = view[key];

        if (nextValue === oldValue) {
          continue;
        }
      }

      view[key] = nextValue;
    }

    // view.applyProperties(props);
  }
};

function register(shortName, apiName) {
  var config = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var definition = _extends({}, defaults, {
    shortName: shortName,
    apiName: apiName
  }, config);

  registry[shortName] = definition;
  registry[apiName] = definition;

  return definition;
}

function create(type, props, handlers, getChildren) {
  return get(type).create(props, handlers, getChildren);
}

function update(type, view, props, handlers) {
  return get(type).update(view, props, handlers);
}

function attachListeners(view, handlers) {
  for (var _name in handlers) {
    view.addEventListener(_name, handlers[_name]);
  }
}

function updateChildren(view, children) {
  if (_titaniumPlatformsOsIos2['default']) {
    view.add(children);
  } else {
    view.removeAllChildren();

    // NOTE: Sloooooooow...

    var i = 0;
    var l = children.length;

    for (; i < l; ++i) {
      if (children[i]) {
        view.add(children[i]);
      }
    }
  }
}