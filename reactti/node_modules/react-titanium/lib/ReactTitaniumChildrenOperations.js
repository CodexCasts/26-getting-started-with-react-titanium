'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _actions;

exports.processChildrenUpdates = processChildrenUpdates;
exports.replaceNode = replaceNode;

var _titaniumPlatformsOsAndroid = require('titanium-platforms/os/android');

var _titaniumPlatformsOsAndroid2 = _interopRequireDefault(_titaniumPlatformsOsAndroid);

var _titaniumPlatformsOsIos = require('titanium-platforms/os/ios');

var _titaniumPlatformsOsIos2 = _interopRequireDefault(_titaniumPlatformsOsIos);

var _reactLibReactMultiChildUpdateTypes = require('react/lib/ReactMultiChildUpdateTypes');

var _reactLibReactMultiChildUpdateTypes2 = _interopRequireDefault(_reactLibReactMultiChildUpdateTypes);

var _ReactTitaniumBridge = require('./ReactTitaniumBridge');

var ReactTitaniumBridge = _interopRequireWildcard(_ReactTitaniumBridge);

var INSERT_MARKUP = _reactLibReactMultiChildUpdateTypes2['default'].INSERT_MARKUP;
var MOVE_EXISTING = _reactLibReactMultiChildUpdateTypes2['default'].MOVE_EXISTING;
var SET_MARKUP = _reactLibReactMultiChildUpdateTypes2['default'].SET_MARKUP;
var TEXT_CONTENT = _reactLibReactMultiChildUpdateTypes2['default'].TEXT_CONTENT;
var REMOVE_NODE = _reactLibReactMultiChildUpdateTypes2['default'].REMOVE_NODE;
var actions = (_actions = {}, _defineProperty(_actions, INSERT_MARKUP, function (update, components) {
  var component = components[update.markupIndex];
  var view = component.getPublicInstance();
  var parent = update.parentNode;

  if (_titaniumPlatformsOsIos2['default']) {
    parent.add({ view: view, position: update.toIndex });
  } else if (_titaniumPlatformsOsAndroid2['default']) {
    parent.insertAt({ view: view, position: update.toIndex });
  } else {
    var children = parent.children.slice(0);

    var nextChildren = [].concat(children.slice(0, update.toIndex)).concat(view).concat(children.slice(update.toIndex));

    ReactTitaniumBridge.updateChildren(parent, nextChildren);
  }
}), _defineProperty(_actions, REMOVE_NODE, function (update, components) {
  // nothing to do here
}), _actions);

exports.actions = actions;

function processChildrenUpdates(updates, components) {
  var length = updates.length;

  var i = 0;

  for (; i < length; ++i) {
    var update = updates[i];

    actions[update.type](update, components);
  }
}

function replaceNode(prevNode, component) {
  // FIXME Need to understand when does this happen
  var nextNode = component.getPublicInstance();
  var parentNode = prevNode.parent;

  if (parentNode) {
    parentNode.remove(prevNode);
    parentNode.add(nextNode);
  }
}