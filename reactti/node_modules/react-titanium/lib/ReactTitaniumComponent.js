'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _reactLibReactMultiChild = require('react/lib/ReactMultiChild');

var _reactLibReactMultiChild2 = _interopRequireDefault(_reactLibReactMultiChild);

var _ReactTitaniumBridge = require('./ReactTitaniumBridge');

var ReactTitaniumBridge = _interopRequireWildcard(_ReactTitaniumBridge);

var _ReactTitaniumIDOperations = require('./ReactTitaniumIDOperations');

var ReactTitaniumIDOperations = _interopRequireWildcard(_ReactTitaniumIDOperations);

var assign = _Object$assign;

var ReactTitaniumComponent = (function () {
  function ReactTitaniumComponent(type) {
    _classCallCheck(this, ReactTitaniumComponent);

    this._type = type.toLowerCase();
    this._renderedChildren = null;
    this._previousStyle = null;
    this._previousStyleCopy = null;
    this._rootNodeID = null;
    this._wrapperState = null;
    this._topLevelWrapper = null;
    this._nodeWithLegacyProperties = null;
  }

  _createClass(ReactTitaniumComponent, [{
    key: 'construct',
    value: function construct(element) {
      this._currentElement = element;
      this._titaniumView = null;
    }
  }, {
    key: 'mountComponent',
    value: function mountComponent(rootID, transaction, context) {
      var _this = this;

      this._rootNodeID = rootID;

      var _currentElement = this._currentElement;
      var type = _currentElement.type;
      var _currentElement$props = _currentElement.props;
      var children = _currentElement$props.children;

      var props = _objectWithoutProperties(_currentElement$props, ['children']);

      var _ReactTitaniumBridge$extractHandlers = ReactTitaniumBridge.extractHandlers(props);

      var handlers = _ReactTitaniumBridge$extractHandlers.handlers;
      var rest = _ReactTitaniumBridge$extractHandlers.rest;

      var _ReactTitaniumBridge$discernTextChildren = ReactTitaniumBridge.discernTextChildren(children);

      var nodes = _ReactTitaniumBridge$discernTextChildren.nodes;
      var texts = _ReactTitaniumBridge$discernTextChildren.texts;

      ReactTitaniumBridge.mutatePropsForTextChildren(type, rest, texts);

      if (type === 'template' || context.templateRendering) {
        return this.mountTemplate(type, rest, handlers, nodes, transaction, context);
      }

      var getChildren = function getChildren() {
        return _this.mountChildren(nodes, transaction, context).map(function (component) {
          return component._titaniumView;
        });
      };

      var view = ReactTitaniumBridge.create(type, rest, handlers, getChildren);

      this._titaniumView = view;

      ReactTitaniumIDOperations.store(this._rootNodeID, this._titaniumView);

      return this;
    }
  }, {
    key: 'mountTemplate',
    value: function mountTemplate(type, props, handlers, nodes, transaction, context) {
      context = _extends({}, context, {
        templateRendering: true
      });

      var template = {
        type: ReactTitaniumBridge.getApiName(type),
        bindId: props.bindId,
        properties: props,
        events: handlers,
        childTemplates: this.mountChildren(nodes, transaction, context).map(function (component) {
          return component._titaniumView;
        })
      };

      this._titaniumView = template;

      return this;
    }
  }, {
    key: 'receiveComponent',
    value: function receiveComponent(nextElement, transaction, context) {
      var type = nextElement.type;
      var _nextElement$props = nextElement.props;
      var children = _nextElement$props.children;

      var props = _objectWithoutProperties(_nextElement$props, ['children']);

      var _ReactTitaniumBridge$extractHandlers2 = ReactTitaniumBridge.extractHandlers(props);

      var handlers = _ReactTitaniumBridge$extractHandlers2.handlers;
      var rest = _ReactTitaniumBridge$extractHandlers2.rest;

      var _ReactTitaniumBridge$discernTextChildren2 = ReactTitaniumBridge.discernTextChildren(children);

      var nodes = _ReactTitaniumBridge$discernTextChildren2.nodes;
      var texts = _ReactTitaniumBridge$discernTextChildren2.texts;

      ReactTitaniumBridge.mutatePropsForTextChildren(type, rest, texts);

      var view = this._titaniumView;

      if (type === 'template' || context.templateRendering) {
        return this;
      }

      ReactTitaniumBridge.update(type, view, rest, handlers);

      this.updateChildren(nodes, transaction, context);

      return this;
    }
  }, {
    key: 'unmountComponent',
    value: function unmountComponent() {
      var view = this._titaniumView;
      var parent = view.parent;

      if (parent) {
        parent.remove(view);
      }

      ReactTitaniumIDOperations.drop(this._rootNodeID);

      this._titaniumView = null;
      this.unmountChildren();
    }
  }, {
    key: 'getPublicInstance',
    value: function getPublicInstance() {
      return this._titaniumView;
    }
  }]);

  return ReactTitaniumComponent;
})();

exports['default'] = ReactTitaniumComponent;

assign(ReactTitaniumComponent.prototype, _reactLibReactMultiChild2['default'].Mixin);
module.exports = exports['default'];