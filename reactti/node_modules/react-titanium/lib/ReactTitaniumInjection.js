'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = inject;

var _reactLibReactComponentEnvironment = require('react/lib/ReactComponentEnvironment');

var _reactLibReactComponentEnvironment2 = _interopRequireDefault(_reactLibReactComponentEnvironment);

var _reactLibReactInjection = require('react/lib/ReactInjection');

var _reactLibReactInjection2 = _interopRequireDefault(_reactLibReactInjection);

var _ReactTitaniumComponent = require('./ReactTitaniumComponent');

//import ReactTitaniumTextComponent from './ReactTitaniumTextComponent';

var _ReactTitaniumComponent2 = _interopRequireDefault(_ReactTitaniumComponent);

var _ReactTitaniumReconcileTransaction = require('./ReactTitaniumReconcileTransaction');

var _ReactTitaniumReconcileTransaction2 = _interopRequireDefault(_ReactTitaniumReconcileTransaction);

var _ReactTitaniumIDOperations = require('./ReactTitaniumIDOperations');

var ReactTitaniumIDOperations = _interopRequireWildcard(_ReactTitaniumIDOperations);

function inject() {
  _reactLibReactInjection2['default'].NativeComponent.injectGenericComponentClass(_ReactTitaniumComponent2['default']);

  //ReactInjection.NativeComponent.injectTextComponentClass(
  //  ReactTitaniumTextComponent
  //);

  _reactLibReactInjection2['default'].Updates.injectReconcileTransaction(_ReactTitaniumReconcileTransaction2['default']);

  // NOTE: very dirty trick due to react@0.14-beta3's current state
  // NOTE: should be `ReactInjection.Component.injectEnvironment({ ... })`
  _reactLibReactComponentEnvironment2['default'].processChildrenUpdates = ReactTitaniumIDOperations.dangerouslyProcessChildrenUpdates;
  _reactLibReactComponentEnvironment2['default'].replaceNodeWithMarkupByID = ReactTitaniumIDOperations.dangerouslyReplaceNodeWithMarkupByID;
}

module.exports = exports['default'];