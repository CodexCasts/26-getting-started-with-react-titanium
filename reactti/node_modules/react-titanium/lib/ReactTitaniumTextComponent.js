'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _ReactTitaniumIDOperations = require('./ReactTitaniumIDOperations');

var ReactTitaniumIDOperations = _interopRequireWildcard(_ReactTitaniumIDOperations);

var ReactTitaniumTextComponent = (function () {
  function ReactTitaniumTextComponent(props) {
    _classCallCheck(this, ReactTitaniumTextComponent);
  }

  _createClass(ReactTitaniumTextComponent, [{
    key: 'construct',
    value: function construct(text) {
      this._currentElement = text;
      this._rootNodeID = null;
      this._titaniumView = null;
    }
  }, {
    key: 'mountComponent',
    value: function mountComponent(rootID, transaction, context) {
      this._rootNodeID = rootID;
      this._titaniumView = null;

      var parent = ReactTitaniumIDOperations.retrieve(this._rootNodeID);

      console.log('create', { parent: this._rootNodeID, text: this._currentElement });

      return this;
    }
  }, {
    key: 'receiveComponent',
    value: function receiveComponent(nextText, transaction) {
      var text = this._currentElement;

      if (text !== nextText) {
        // TODO do something
      }
    }
  }, {
    key: 'unmountComponent',
    value: function unmountComponent() {
      // TODO do something
    }
  }, {
    key: 'getPublicInstance',
    value: function getPublicInstance() {
      return null;
    }
  }]);

  return ReactTitaniumTextComponent;
})();

exports['default'] = ReactTitaniumTextComponent;
module.exports = exports['default'];