'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _ReactTitaniumBridge = require('../ReactTitaniumBridge');

var _utilsGroupBy = require('../utils/groupBy');

var _utilsGroupBy2 = _interopRequireDefault(_utilsGroupBy);

var _utilsIndexBy = require('../utils/indexBy');

var _utilsIndexBy2 = _interopRequireDefault(_utilsIndexBy);

(0, _ReactTitaniumBridge.register)('list', 'Ti.UI.ListView', {
  factory: function factory(props) {
    return Ti.UI.createListView(props);
  },

  create: function create(props, handlers, getChildren) {
    var children = getChildren();

    var _groupBy = (0, _utilsGroupBy2['default'])(children, function (child) {
      return child.type === 'template' ? 'templates' : child.apiName === 'Ti.UI.ListSection' ? 'sections' : 'others';
    });

    var sections = _groupBy.sections;
    var templates = _groupBy.templates;
    var others = _groupBy.others;

    (0, _invariant2['default'])(!others, "Only <listsection>s and <template>s can be children of a <list>");

    var view = this.factory(_extends({}, props, {
      sections: sections,
      templates: (0, _utilsIndexBy2['default'])(templates, function (template) {
        return template.properties.name;
      })
    }));

    (0, _ReactTitaniumBridge.attachListeners)(view, handlers);

    return view;
  }
});